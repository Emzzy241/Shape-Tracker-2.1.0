using System;
using ShapeTracker.Models;
using ShapeTracker.UserInterfaceModels;
using System.Collections.Generic;

namespace ShapeTracker
{
  class Program
  {
    static void Main()
    {
        // Calling my welcome property from my banners class
        // Do't forget the auto-implemented property we added there... Its a property, not a method
        Console.WriteLine(WelcomeBanner.Welcome);

        Console.WriteLine("Welcome to the ShapeTracker application");
        Console.WriteLine();
        Console.WriteLine();
        Console.WriteLine("To track Triangles, enter 't', to track rectangle enter 'r', to track ellipse enter 'e'. To end application enter k.");
        string userAns = Console.ReadLine().ToLower();

        switch (userAns)
        {
          case "t":
                  Console.WriteLine();
                  Console.WriteLine();
                  Console.WriteLine("Lets track some Triangles");
                  
                  Console.WriteLine("We'll calculate what type of triangle you have based off of the lengths of the triangle's 3 sides.");
              
                  // Taking in the inputs from my users

                Console.WriteLine("Please enter a number");
                string stringNumber1 = Console.ReadLine();

                Console.WriteLine("Enter another number");
                string stringNumber2 = Console.ReadLine();

                Console.WriteLine("Enter a third number");
                string stringNumber3 = Console.ReadLine();

                // Console.ReadLine(); taskes in a string, we need to make use of int.Parse() to change it to an integer

                int firstSide = int.Parse(stringNumber1);
                int secondSide = int.Parse(stringNumber2);
                int thirdSide = int.Parse(stringNumber3);

                // Making a new instance of the tringle so I can input all of me 3 sides in it
                Triangle tri = new Triangle(firstSide, secondSide, thirdSide);
            
                // NOTE: Any new method we create in our Program class(that contains our UI logic) should be static. We dont want to have to create an instance of the Program class in order to call the method.
                // Calling the static ConfirmOrEditTriangle() method
                ConfirmOrEditTriangle(tri);
  

    // Writing the Static ConfirmOrEditTriangle() method

                static void ConfirmOrEditTriangle(Triangle tri)
                {
                    // Its a static and a void method
                    // code to confirm the sides of our triangle will go here

                    Console.WriteLine("Please confirm that you entered in your triangle correctly:");
                    Console.WriteLine($"Side 1 has a length of {tri.Side1}.");
                    Console.WriteLine($"Side 2 has a length of {tri.Side2}.");
                    Console.WriteLine($"Side 3 has a length of {tri.GetSide3()}.");
                    Console.WriteLine("Is that correct? Enter 'yes' to proceed, or 'no' to re-enter the triangle's sides. ");
                    string userInput = Console.ReadLine().ToUpper();  

                    if (userInput == "YES")
                        {
                            // We can easily add the code here to check the type of the triangle, but we want to practice a good separation of concern; edit functionality is different form triangle type checking functionality, hence we separate them into different methods

                            CheckTriangleType(tri);
                        }
                        else if(userInput == "NO")
                        {
                            Console.WriteLine("Let's fix your triangle. Please enter the 3 sides again!");
                            Console.WriteLine("Please enter a number:");
                            string stringNumber1 = Console.ReadLine();  
                            Console.WriteLine("Enter another number:");
                            string stringNumber2 = Console.ReadLine();  
                            Console.WriteLine("Enter a third number:");
                            string stringNumber3 = Console.ReadLine();  
                            tri.Side1 = int.Parse(stringNumber1);  
                            tri.Side2 = int.Parse(stringNumber2);  
                            tri.SetSide3(int.Parse(stringNumber3)); 
                            ConfirmOrEditTriangle(tri);

                            // In any case, keep in mind that you can create a loop by calling on the same method you are declaring within its own definition (eg: calling ConfirmOrEditTriangle() within the ConfirmOrEditTriangle() definition)
                        }
                        else
                        {
                          Console.WriteLine("I'm sorry, I did not get that, let's try again");
                          
                        }
                        
                    }

                    // Like other UI methods, the CheckTriangleType() method is static so that we can call it on the class and not the instance... This is important for the method to work as expected
                    // How this UI method works: we call on the instance method Triangle.CheckType() to determine the type of the triangle

                    static void CheckTriangleType(Triangle tri)
                    {
                        string result = tri.CheckType();
                        Console.WriteLine("-----------------------------------------");
                        Console.WriteLine("Your result is: " + result + ".");
                        Console.WriteLine("-----------------------------------------");
                        Console.WriteLine("What's next?");
                        Console.WriteLine("Would you like to check a new triangle (new)?");
                        // PrintAllTriangles();
                        Console.WriteLine("Please enter 'new' to check the type of a new triangle. To see all triangles created, enter 'get', to clear all, enter 'clear'");
                        string userResponse = Console.ReadLine().ToUpper(); 
                        
                        if (userResponse == "NEW")
                        {
                          
                          Console.WriteLine();
                          Console.WriteLine();
                            // We are looping back to the start of our program 
                            Main();

                            
                          Console.WriteLine();
                          Console.WriteLine();
                        }
                        else if(userResponse == "GET")
                        {
                          
                          Console.WriteLine();
                          Console.WriteLine();

                          PrintAllTriangles();

                          
                          Console.WriteLine();
                          Console.WriteLine();
                        }
                        else if(userResponse == "CLEAR")
                        {
                          
                          Console.WriteLine();
                          Console.WriteLine();

                          ClearAllTriangles();
                          
                          Console.WriteLine();
                          Console.WriteLine();
                        }
                        else{
                          Console.WriteLine();
                          Console.WriteLine();
                          Console.WriteLine("I'm sorry, I did not get that, let's try again");
                          Main();
                        }
                    }

                    // Writing the functionalities for printing all triangles and to clear all the triangles.

                    // For printing all triangles
                    static void PrintAllTriangles()
                    {
                      
                        Console.WriteLine();
                        Console.WriteLine("Here are all the triangles you have created");
                        List<Triangle> triangleList = Triangle.GetAll();

                        
                        foreach (Triangle triangle in triangleList)
                        {
                            Console.WriteLine($"Triangle with sides {triangle.Side1}, {triangle.Side2}, {triangle.GetSide3()} is a {triangle.CheckType()}");
                        }

                        Console.WriteLine();
                        Console.WriteLine();
                        Console.WriteLine();
                        Console.WriteLine("Lets go Again");
                        Console.WriteLine();
                        Console.WriteLine();
                        Main();
                    }

                    // For printing all triangles
                    static void ClearAllTriangles()
                    {
                      Triangle.ClearAll();

                        Console.WriteLine("All Triangles cleared");
                        
                        Console.WriteLine();
                        Console.WriteLine();
                        Console.WriteLine();
                        Console.WriteLine("Lets go Again");
                        Console.WriteLine();
                        Console.WriteLine();
                        Main();
                    }


                        
                        break;
        }

            case "r":
                Console.WriteLine("Yay. Rectangles");
            break;

            
                }

          // default:
          //   break;
        }
        


    }

  

















